import copy

from implicitmodules.torch.Utilities.factory import ObjectFactory
from implicitmodules.torch.Utilities.compute_backend import get_compute_backend


class DeformationModule:
    """Base deformation module."""
    def __init__(self, label):
        self.__label = label

    @property
    def label(self):
        """ Identifier for the module. """
        return self.__label

    def copy(self):
        """ Returns a copy of the deformation module. """
        return copy.copy(self)

    def __call__(self, points, k=0):
        """ Computes the k'th derivative of the module generated vector field at positions given by *points*.

        Parameters
        ----------
        points : torch.Tensor
            A :math:`N \\times d` dimensioned tensor representing the points at which the generated vector field will be computed
        k : int, default=0
            The order of the derivative at which the generated vector field will be computed

        Returns
        -------
        torch.Tensor
            A tensor representing the values of the k'th derivative of the generated vector field at positions given by *points*. For :math:`k=0`, the output tensor is of shape :math:`N \\times d`. For :math:`k=1`, the output tensor is of shape :math:`N \\times d \\times d`, and so on for subsequent orders.
        """
        raise NotImplementedError

    def cost(self):
        """ Computes the cost of the deformation given by the module.

        Returns
        -------
        torch.Tensor
            The cost as a scalar tensor.
        """
        raise NotImplementedError

    def compute_geodesic_control(self, manifold):
        """ Computes the geodesic control of the deformation module on the specified manifold.

        Parameters
        ----------
        manifold : Manifolds.BaseManifold
            Manifold on which we will compute the geodesic controls
        """
        raise NotImplementedError

    def field_generator(self):
        """ Gives the vector field generated by the deformation module.

        Returns
        -------
        StructuredField.BaseStructuredField
            The vector field generated by the module
        """
        raise NotImplementedError


def create_deformation_module_with_backends(build_torch, build_keops):
    def create_deformation_module(*args, backend=None, **kwargs):
        if backend is None:
            backend = get_compute_backend()

        if backend == 'torch':
            return build_torch(*args, **kwargs)
        elif backend == 'keops':
            return build_keops(*args, **kwargs)
        else:
            raise NotImplementedError("Error while creating module! {backend} backend not recognised!".format(backend=backend))

    return create_deformation_module


