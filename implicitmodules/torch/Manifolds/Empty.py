import torch

from implicitmodules.torch.Manifolds.Abstract import BaseManifold
from implicitmodules.torch.StructuredFields import StructuredField_Null


class EmptyManifold(BaseManifold):
    def __init__(self):
        super().__init__()

    def to(self, device):
        pass

    def clone(self, requires_grad=True):
        return EmptyManifold()

    @property
    def nb_pts(self):
        return 0

    @property
    def dim(self):
        return 0

    @property
    def numel_gd(self):
        return (0,)

    @property
    def shape_gd(self):
        return(torch.Size([]),)

    @property
    def len_gd(self):
        return 0

    @property
    def dim_gd(self):
        return ()

    def unroll_gd(self):
        return []

    def unroll_tan(self):
        return []

    def unroll_cotan(self):
        return []

    def roll_gd(self, l):
        pass

    def roll_tan(self, l):
        pass

    def roll_cotan(self, l):
        pass

    def __get_gd(self):
        return torch.tensor([], requires_grad=True)

    def __get_tan(self):
        return torch.tensor([], requires_grad=True)
 
    def __get_cotan(self):
        return torch.tensor([], requires_grad=True)

    def fill(self, manifold, copy=False, requires_grad=True):
        pass

    def fill_gd(self, gd, copy=False, requires_grad=True):
        pass

    def fill_tan(self, tan, copy=False, requires_grad=True):
        pass

    def fill_cotan(self, cotan, copy=False, requires_grad=True):
        pass

    def fill_gd_zeros(self, requires_grad=True):
        pass

    def fill_tan_zeros(self, requires_grad=True):
        pass

    def fill_cotan_zeros(self, requires_grad=True):
        pass

    gd = property(__get_gd, fill_gd)
    tan = property(__get_tan, fill_tan)
    cotan = property(__get_cotan, fill_cotan)

    def muladd_gd(self, gd, scale):
        pass

    def muladd_tan(self, tan, scale):
        pass

    def muladd_cotan(self, cotan, scale):
        pass

    def negate_gd(self):
        pass

    def negate_tan(self):
        pass

    def negate_cotan(self):
        pass

    def inner_prod_field(self, field):
        return 0.

    def action(self, field) :
        """Applies the vector field generated by the module on the landmark."""
        return EmptyManifold()

    def cot_to_vs(self, sigma, backend=None):
        return StructuredField_Null()

