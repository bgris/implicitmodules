import numpy as np

from implicitmodules.numpy.DeformationModules.Abstract import DeformationModule
from implicitmodules.numpy.Manifolds import Landmark
from implicitmodules.numpy.StructuredFields import ConstantField


class GlobalTranslation(DeformationModule):
    """
     GlobalTranslation
    """
    
    def __init__(self, dim, coeff):
        """
        dim is the dimension of the ambient space
        """
        self.dim = dim
        self.coeff = coeff
        self.GD = Landmark(1, dim)
        self.Cont = np.zeros([self.dim])
        self.cost = 0.
    
    def copy(self):
        return GlobalTranslation(self.dim, self.coeff)
    
    def copy_full(self):
        Mod = GlobalTranslation(self.dim, self.coeff)
        Mod.GD = self.GD.copy_full()
        Mod.Cont = self.Cont.copy()
        Mod.cost = self.cost
        return Mod
    
    def fill_GD(self, GD):
        self.GD = GD.copy_full()
    
    def fill_Cont(self, Cont):
        self.Cont = Cont.copy()
    
    
    def update(self):
        """
        Supposes that values of GD have been filled
        """
        pass
    
    def GeodesicControls_curr(self, GDCot):
        """
        Supposes that GDCot has Cot filled
        """
        
        Cont_geo = np.zeros([self.dim])
        
        for i in range(self.dim):
            cont_i = np.zeros([self.dim])
            cont_i[i] = 1.
            v_i = ConstantField(cont_i)
            Cont_geo[i] = (1. / self.coeff) * GDCot.inner_prod_v(v_i)
        
        self.Cont = Cont_geo.copy()
    
    def field_generator_curr(self):
        return self.field_generator(self.GD, self.Cont)
    
    def field_generator(self, GD, Cont):
        return ConstantField(Cont)
    
    def Cost_curr(self):
        p = self.Cont.flatten()
        self.cost = self.coeff * np.dot(p,  p) / 2
    
    def Cost(self, GD, Cont):
        p = Cont.flatten()
        return self.coeff * np.dot(p, p) / 2
    
    def DerCost_curr(self):
        out = self.GD.copy()
        out.fill_zero_tan()
        return out
    

    def cot_to_innerprod_curr(self, GDCot, j):  #
        """
         Transforms the GD (with Cot filled) GDCot into vsr and computes
         the inner product (or derivative wrt self.GD) with the
         field generated by self.
         The derivative is a returned as a GD with cotan filled (tan=0)
         
         Here: if j=0, computes field and applies it to GDCot,
                if j=1 derivation is 0.
        """
        
        
        if j == 0:
            v = self.field_generator_curr()
            out = GDCot.inner_prod_v(v)
        if j == 1:
            out = self.GD.copy()
            out.GD = self.GD.GD.copy()

        return out
