import numpy as np

from implicitmodules.numpy.DeformationModules.Abstract import DeformationModule
from implicitmodules.numpy.Manifolds import GD_landmark
from implicitmodules.numpy.StructuredFields import StructuredField_Null


class SilentLandmark(DeformationModule):
    """
     Elastic module of order 0
    """
    
    def __init__(self, N_pts, dim):
        """
        sigma is the scale of the rkhs of generated vector fields
        N_pts is the number of landmarks
        dim is the dimension of the ambient space
        """
        self.N_pts = N_pts
        self.dim = dim
        self.GD = GD_landmark(N_pts, dim)
        self.cost = 0.
        self.Cont = np.empty([0])
    
    def copy(self):
        return SilentLandmark(self.N_pts, self.dim)
    
    def copy_full(self):
        Mod = SilentLandmark(self.N_pts, self.dim)
        Mod.GD = self.GD.copy_full()
        return Mod
    
    def fill_Cont(self, Cont):
        pass
    
    def fill_GD(self, GD):
        self.GD = GD.copy_full()
    
    def update(self):
        pass
    
    def GeodesicControls_curr(self, GDCot):
        pass
    
    def field_generator_curr(self):
        return StructuredField_Null()
    
    def Cost_curr(self):
        pass
    
    def Cost(self, GD, Cont):
        return 0.
    
    def DerCost_curr(self):
        out = self.GD.copy()
        out.GD = self.GD.GD.copy()
        return out
    
    def cot_to_innerprod_curr(self, GDCot, j):  #
        """
         Transforms the GD (with Cot filled) GDCot into vsr and computes
         the inner product (or derivative wrt self.GD) with the
         field generated by self.
         The derivative is a returned as a GD with cotan filled (tan=0)
        """
        
        if j == 0:
            out = 0.
        if j == 1:
            out = self.GD.copy()
            out.GD = self.GD.GD.copy()
        
        return out
